@page "/"
@page "/QuindiciGame"

@using Quindici.Data
@inject TilesGenerator Tiles

<h1>Il gioco del Quindici - Fifteen Puzzle</h1>
<h2>by Andrea Piscitelli</h2>

@if (tiles == null)
{
    <p><em>Loading...</em></p>
}
else
{
<span class="oi oi-reload btn btn-info btn-lg bigButton pointer" aria-hidden="true"></span>

    if (Tiles.Done)
    {
        <h3>Well Done!</h3>
        <br />
        <button class="btn" @onclick="() => Restart()"><i class="fas fa-plus fa-2x"></i></button>
        <span class="oi oi-reload btn btn-info btn-lg bigButton pointer" aria-hidden="true"></span>
    }
    <table class="fifteenpuzzle">
        <tbody>
            @for (int riga = 0; riga < 4; riga++)
            {
                <tr class="fifteenpuzzle">
                    @for (int column = 0; column < 4; column++)
                    {
                        tile = tiles.Where(n => n.Row == riga && n.Column == column).FirstOrDefault();
                        int indexR = tile.Row;
                        int indexC = tile.Column;
                        string sfondo = tile.backgroundColor;
                        <td class="fifteenpuzzle @sfondo" @onclick="() => ClickTile(indexR, indexC)">
                            @tile.Number
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Tile> tiles;
    private Tile tile;

    protected override void OnInitialized()
    {
        tiles = Tiles.GenerateTiles();
    }

    protected void ClickTile(int riga, int colonna)
    {
        if (!Tiles.Done)
        {
            tiles = Tiles.TryMoveTile(riga, colonna);
            RefreshPage();
        }
    }

    protected void Restart()
    {
        tiles = Tiles.Restart();
        RefreshPage();
    }

    protected void RefreshPage()
    {
        this.StateHasChanged();
    }
}
